<html lang="en">

<head>
    <%- include ("snippets/header") %>


        <script src="/js/videojs.ass.js"></script>
        <link href="/css/videojs/videojs.ass.css" rel="stylesheet">

        <link href="/css/videojs/videojs_skin.css" rel="stylesheet">
        <link href="/css/videojs/videojs_css.css" rel="stylesheet">

        <script src="/js/custom_videojs_components.js"></script>
        <link href="/css/videojs/custom_videojs_components.css" rel="stylesheet">

</head>

<body style="padding:0px">
    <div id="video">
        <video id="player" class="video-js vjs-lime" controls>
            <p class="vjs-no-js">
                To view this video please enable JavaScript, and consider upgrading to a
                web browser that
                <a href="https://videojs.com/html5-video-support/" target="_blank">
                    supports HTML5 video
                </a>
            </p>
        </video>
        
        <div class="offcanvas offcanvas-end" tabindex="-1" id="watch_party_offcanvas" aria-labelledby="watch_party_offcanvas_label">
            <div class="offcanvas-header">
                <h5 id="watch_party_offcanvas_label" class="align-middle m-0">Watch Party</h5>
                <div>
                    <a type="button" class="p-1 clipboard-button" id="copy_room_link" data-clipboard-text=""><i class="bi bi-link-45deg"></i></a>
                    <a type="button" class="p-1" data-bs-dismiss="offcanvas" aria-label="Close"><i class="bi bi-x-lg"></i></a>
                </div>
            </div>
            <div class="offcanvas-body">
                <div class="d-flex flex-column h-100">
                    <div class="flex-grow-1 overflow-auto" id="messages">
                    </div>
                    <div class="form-floating">
                        <input autocomplete="off" type="text" class="form-control" id="chat-field" placeholder="Chat">
                        <label for="chat-field">Chat</label>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
        const urlSearchParams = new URLSearchParams(window.location.search);
        const params = Object.fromEntries(urlSearchParams.entries());
        var room_id = params.room_id;
            
        const socket = io("/watch_party");
        // history.replaceState(null, "", location.href.split("?")[0]);

        function fetchCurrentTime(){//fetch the currentwatch time
            if(params.start_time){
                let start_time = DOMPurify.sanitize(params.start_time);
                if(isInt(start_time)){
                    let time = parseFloat(start_time);
                    player.currentTime(time);
                }
            }
            else{
                let id = movieDetails.id;
                let type = movieDetails.type;
                let season = "";
                let episode = "";
                if(movieDetails.type == "show"){
                    season = episodeDetails.season;
                    episode = episodeDetails.episode;
                }

                let url = root + `/getcurrenttime/${type}/${id}`;
                if(season != "" && episode != ""){
                    url += `/${season}/${episode}`;
                }
                
                fetch(url).then((response) => {
                    response.json().then((json) => {
                        completeCurrentTimeFetch = true;
                        try{
                            let time = parseFloat(json.watchTime);
                            player.currentTime(time);
                        } catch(err){
                            console.log(err);
                        }
                    });
                });
            }
        }

        function sendCurrentTime(){
            if(!completeCurrentTimeFetch){
                return;
            }
            let id = movieDetails.id;
            let type = movieDetails.type;
            let season = undefined;
            let episode = undefined;

            if(movieDetails.type == "show"){
                season = episodeDetails.season;
                episode = episodeDetails.episode;
            }

            let currentTime = player.currentTime();

            var root = document.location.origin;
            let url = root + `/updatecurrenttime/${currentTime}/${type}/${id}/${season}/${episode}`;

            fetch(url).then((response) => {});
        }

        function sendWatchedTime(){
            let timeToSend = totalUnsentTime;
            totalUnsentTime = 0;
            
            var root = document.location.origin;
            let url = root + `/profile/updatetimewatched/${timeToSend}`;
            fetch(url).then((response) => {});
        }

        $(document).ready(() => {
            init_clipboard();

            $("#copy_room_link").click(function () {
                $("#copy_room_link").popover({ placement: "bottom", trigger: "manual", html: true, content: "Copied to clipboard!" }).popover("show");

                setTimeout(() => {
                    $("#copy_room_link").popover("dispose");
                }, 3000);
            });

            $("#chat-field").on("keydown", function (e) {
                if (e.code === "Enter") {  //checks whether the pressed key is "Enter"
                    // console.log(e.target);
                    let value = $(e.currentTarget).val();
                    if(value != null){
                        value = value.trim();
                        if(value.length != 0){
                            socket.emit("watch_party:chat", room_id, value);
                            add_user_message(username, value);
                            $(e.currentTarget).val("");
                        }
                    }
                }
            });
        });

        window.addEventListener('beforeunload', (event) => {
            sendCurrentTime();
        });

        /**
         * 
         */
        function fillMediaDetails(){
            //set title
            //set description
            //set src
            //replace subtitles
        }

        var attempted_to_start = false;
        var connected_to_room = false;

        function start_watch_party() {
            if(!connected_to_room && !attempted_to_start){
                attempted_to_start = true;
                if(socket){
                    socket.emit("watch_party:create_room", player.currentTime());
                }
            }
            let off_canvas = $("#watch_party_offcanvas");
            var bsOffcanvas = bootstrap.Offcanvas.getOrCreateInstance(off_canvas[0]);
            bsOffcanvas.show();
        }

        function add_user_joined_message (username){
            let clean_name = DOMPurify.sanitize(username);
            let message_div = `
                        <div class="message mb-1">
                            <p class="m-0"><b>${clean_name}</b> has joined the party!</p>
                        </div>`;

            $(message_div).appendTo("#messages").hide().fadeIn(300);
        }

        function remove_user_joined_message (username){
            let clean_name = DOMPurify.sanitize(username);
            let message_div = `
                        <div class="message mb-1">
                            <p class="m-0"><b>${clean_name}</b> has left the party!</p>
                        </div>`;

            $(message_div).appendTo("#messages").hide().fadeIn(300);
        }

        function add_user_message(username, message) {
            let clean_name = DOMPurify.sanitize(username);
            let clean_message = DOMPurify.sanitize(message);
            let message_div = `
                        <div class="message mb-1">
                            <p class="m-0"><b>${clean_name}</b></p>
                            <p>${clean_message}</p>
                        </div>`;

            $(message_div).appendTo("#messages").hide().fadeIn(300);
        }

        var username = <%- JSON.stringify(username) %>;
        var completeCurrentTimeFetch = false;
        var totalUnsentTime = 0;

        const movieDetails = <%- JSON.stringify(media_details) %>;
        const subtitle = <%- JSON.stringify(subtitles_path) %>;//subtitle link
        var poster = <%- JSON.stringify(backdrop) %>;

        var root = document.location.origin;
        var source = root + <%- JSON.stringify(mp4_url) %>;
        var type = "video/mp4";

        var episodeDetails = null;
        <% if(media_details.type == "show"){ %>
            episodeDetails = <%- JSON.stringify(episode_details) %>;
        <% } %>

        if(movieDetails.type == "show"){
            poster = "/images/"+episodeDetails.backdrop;
            console.log(poster);
        }


        function UrlExists(url) {
            var http = new XMLHttpRequest();
            http.open('HEAD', url, false);
            http.send();
            if (http.status != 404) {
                return true;
            }
            else {
                return false;
            }
        }

        document.addEventListener('DOMContentLoaded', () => {

            var pcChildren = {
                'playToggle': {},
                'volumePanel': {},
                'RemainingTimeDisplay': {},
                'progressControl': {},
                'SubsCapsButton': {},
                'pictureInPictureToggle': {},
                'fullscreenToggle': {}
            };

            var mobileChildren = {
                'playToggle': {},
                'RemainingTimeDisplay': {},
                'progressControl': {},
                'SubsCapsButton': {},
                'fullscreenToggle': {}
            };

            var childControlBar = pcChildren;

            var isMobile = false; //initiate as false
            // device detection
            if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent)
                || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(navigator.userAgent.substr(0, 4))) {
                isMobile = true;
            }

            if (isMobile) {
                childControlBar = mobileChildren;
            }

            var options = {
                html5: {
                    nativeTextTracks: false
                },
                textTrackSettings: true,
                preload: true,
                controls: true,
                autoplay: true,
                children: {
                    bigPlayButton: {},
                    textTrackDisplay: true,
                    controlBar: {
                        children: childControlBar
                    },
                }
            };

            var player = videojs('player', options, function onPlayerReady() {
                if (isMobile) {//if the device is mobile, set the player to the max volume, so the user can control it with their device
                    this.volume(1);
                }
                else {
                    let volume = localStorage.getItem("volume");
                    if (volume != null) {
                        this.volume(volume);
                    }
                }

                fetchCurrentTime();

                this.hotkeys({
                    volumeStep: 0.1,
                    seekStep: 5,
                    enableVolumeScroll: false,
                    enableModifiersForNumbers: false,
                    alwaysCaptureHotkeys: true,
                    playPauseKey: function (event, player) {
                        return ((event.which === 75) || (event.which === 32)); //K and Spacebar
                    },
                    rewindKey: function (event, player) {
                        return ((event.which === 37) || (event.which === 74)); //left arrow, and J
                    },
                    forwardKey: function (event, player) {
                        return ((event.which === 39) || (event.which === 76)); //Right arrow and L
                    }
                });

                this.on('pause', function () {
                    sendCurrentTime();
                });

                this.on('ended', function () {//set up for auto play
                    //set up autoplay
                });

                this.on('volumechange', function (event) {
                    let volume = localStorage.setItem("volume", this.volume());
                });

                let timer = null;

                let time = new Date();

                function startPlaying() {
                    timer = window.setInterval(function () {
                        totalUnsentTime += 10;
                        if (totalUnsentTime != 0 && (totalUnsentTime % (60 * 1000) == 0)) {//if 1 minute has past, send watch time
                            sendWatchedTime();
                        }
                    }, 10);
                }

                function pausePlaying() {
                    if (timer) {
                        clearInterval(timer);
                        sendWatchedTime();
                    }
                }

                this.on('play', startPlaying);
                this.on('pause', pausePlaying);

                let subtitleURL = root + subtitle;
                if ((typeof subtitle != null) && UrlExists(subtitleURL)) {//attempts to fetch the subtitles
                    const setSubtitles = async () => {
                        const response = await fetch(subtitleURL);
                        try {
                            const myJson = await response.json(); //extract JSON from the http response
                            let arrayOfSubs = myJson;
                            for (let i = 0; i < arrayOfSubs.length; i++) {
                                let subtitle = arrayOfSubs[i];
                                let extension = subtitle.file_extension;
                                if (extension == "vtt") {
                                    player.addRemoteTextTrack({
                                        kind: 'subtitles',
                                        srclang: subtitle.srclang,
                                        label: subtitle.label,
                                        src: subtitle.fileLocation
                                    });
                                }
                                else if (extension == "ass" || extension == "ssa") {
                                    var vjs_ass = player.ass({
                                        'src': subtitle.fileLocation,
                                        label: subtitle.label,
                                    });
                                }
                            }
                        } catch (err) { console.log(err) }
                    };
                    setSubtitles();
                }
                
                // Register the component with Video.js, so it can be used in players.
                videojs.registerComponent('Text', Text);
                videojs.registerComponent('Panel', Panel);
                videojs.registerComponent('Button', Button);
                videojs.registerComponent('Spacer', Spacer);
                videojs.registerComponent('Custom', Custom);

                if (isMobile) {
                    player.controlBar.addChild('Spacer', {}, 2);
                }
                else {
                    player.controlBar.addChild('Spacer', {}, 3);
                }

                let titleOverlay = player.addChild('Panel', { classes: "vjs-title-panel" });
                let rewind = player.controlBar.addChild('Button', { classes: "vjs-rewind-button vjs-control vjs-button" }, 1);
                let forward = player.controlBar.addChild('Button', { classes: "vjs-forward-button vjs-control vjs-button" }, 2);
                let watch_party = player.controlBar.addChild('Button', { classes: "vjs-watch-party-button vjs-control vjs-button" }, 6);
                let controlsOverlay = player.addChild('Panel', { classes: "vjs-controls-panel", defaultValues: true });
                let back = controlsOverlay.addChild('Button', { classes: "vjs-back-button vjs-control vjs-button" });

                rewind.el().onclick = () => {
                    player.currentTime(player.currentTime() - 10);
                }

                forward.el().onclick = () => {
                    player.currentTime(player.currentTime() + 10);
                }

                watch_party.el().onclick = () => {
                    start_watch_party();
                }

                back.el().onclick = () => {
                    //when clicked it should go back to the media modal instead of going back to the previous page
                    // window.history.back();
                    if (movieDetails.type == "show") {
                        window.location.href = root + `/shows`;
                    }
                    else {
                        window.location.href = root + `/movies`;
                    }
                }

                let mediaType = movieDetails.type;

                let titleText = movieDetails.title;
                let descriptionText = "";
                let episode_info = ``;

                console.log(episodeDetails);
                if (movieDetails.type == "show") {
                    descriptionText = episodeDetails.description;

                    let seasonAndEpisodeText = `S${episodeDetails.season} E${episodeDetails.episode}`;
                    let episodeTitleText = episodeDetails.title;

                    episode_info = `<p>${seasonAndEpisodeText} - ${episodeTitleText}</p>`

                    //creates next episode button if it is a show
                    let showId = episodeDetails.show_id;
                    let season = episodeDetails.season;
                    let episode = episodeDetails.episode;

                    let nextEpisode = player.controlBar.addChild('Button', { classes: "vjs-next-episode-button vjs-control vjs-button" }, 3);
                    nextEpisode.el().onclick = () => {
                        window.location.href = root + `/watch/${mediaType}/${showId}/${season}/${episode + 1}?start_time=0`;
                    }
                }
                else {
                    descriptionText = movieDetails.description;
                }

                let mediaDetailsHTML =
                    `<a 
                        class="btn shadow-none collapsed" 
                        id="media_button" 
                        data-bs-toggle="collapse" 
                        href="#media_details_collapse" 
                        role="button" 
                        aria-expanded="false" 
                        aria-controls="media_details_collapse"
                        >${titleText} <i class="fas fa-chevron-down"></i>
                    </a>${episode_info}<div class="collapse" id="media_details_collapse"><div class="card card-body">${descriptionText}</div></div>`;
                let custom = player.controlBar.addChild('Custom', { classes: "media-details-collapse", innerHTML: mediaDetailsHTML });

                $("#media_button").on("click", function () {
                    let $this = $(this);
                    if ($this.hasClass("collapsed")) {
                        let icon = $this.find("i");
                        icon.removeClass("fas fa-chevron-up");
                        icon.addClass("fas fa-chevron-down");
                    }
                    else {
                        let icon = $this.find("i");
                        icon.removeClass("fas fa-chevron-down");
                        icon.addClass("fas fa-chevron-up");
                    }
                });
            });

            player.poster(poster);
            player.src({
                src: source,
                type: type,
                withCredentials: true
            });

            window.player = player;
            window.document.title = "Movie Buddy - " + movieDetails.title;

            player.old_play = player.play;
            player.old_pause = player.pause;
            player.old_seek = player.currentTime;

            function new_play(fromServer) {
                if (!fromServer && connected_to_room) {
                    socket.emit("watch_party:play", room_id, player.old_seek());
                }
                return player.old_play();
            }
            function new_pause(fromServer) {
                if (!fromServer && connected_to_room) {
                    socket.emit("watch_party:pause", room_id);
                }
                return player.old_pause();
            }
            function new_current_time(time, fromServer) {
                if (!fromServer && connected_to_room) {
                    socket.emit("watch_party:seek", room_id, time);
                }
                if(time == undefined){
                    return player.old_seek();
                }
                else{
                    return player.old_seek(time);
                }
            }

            player.play = new_play;
            player.pause = new_pause;
            player.currentTime = new_current_time;

            if(room_id != null){
                console.log(room_id);
                socket.emit("watch_party:join_party", room_id);
            }

            socket.on("watch_party:error", (message) => {
                console.log(message);
            });

            socket.on("watch_party:room_does_not_exist", (message) => {
                console.log(message);
            });

            socket.on("watch_party:user_joined", (username) => {
                add_user_joined_message(username);
            });

            socket.on("watch_party:user_left", (username) => {
                remove_user_joined_message(username);
            });

            socket.on("watch_party:chat", (username, message) => {
                let cleaned_username = DOMPurify.sanitize(username);
                let cleaned_message = DOMPurify.sanitize(message);

                add_user_message(cleaned_username, cleaned_message);
            });

            socket.on("watch_party:room_created", (roomId) => {
                room_id = roomId;
                connected_to_room = true;
                console.log(`Room Created ${roomId}`);
                
                let current = window.location.href.split('?')[0]
                let link = `${current}?room_id=${room_id}`;
                $("#copy_room_link").attr("data-clipboard-text", link);
            });

            socket.on("watch_party:room_joined_confirmed", (time) => {
                if(!connected_to_room){
                    console.log(`Room Joined ${room_id}`);

                    let current = window.location.href.split('?')[0]
                    let link = `${current}?room_id=${room_id}`;
                    $("#copy_room_link").attr("data-clipboard-text", link);

                    connected_to_room = true;
                    player.currentTime(time, true);
                }
            });

            socket.on("watch_party:play", (time) => {
                if(connected_to_room){
                    player.play(true);
                    player.currentTime(time, true);
                }
            });

            socket.on("watch_party:pause", () => {
                if(connected_to_room){
                    player.pause(true);
                }
            });

            socket.on("watch_party:seek", (time) => {
                if(connected_to_room){
                    player.currentTime(time, true);
                }
            });

            socket.on("watch_party:request_current_time", (time) => {
                if(connected_to_room){
                    socket.emit("watch_party:current_time", time);
                }
            });
        });
        $(function () {//this function removed the cursor if the cursor is idle for longer than 2 seconds
            var timer;
            var fadeInBuffer = false;
            var theSelector = "#player, #player > * > *";
            $(document).mousemove(function () {
                if (!fadeInBuffer && timer) {
                    // console.log("clearTimer");
                    clearTimeout(timer);
                    timer = 0;

                    // console.log("fadeIn");
                    $(theSelector).css({
                        cursor: ''
                    });
                } else {
                    $(theSelector).css({
                        cursor: 'default'
                    });
                    fadeInBuffer = false;
                }


                timer = setTimeout(function () {
                    // console.log("fadeout");
                    $(theSelector).css({
                        cursor: 'none'
                    });

                    fadeInBuffer = true;
                }, 2000)
            });
            $(theSelector).css({
                cursor: 'default'
            });
        });

    </script>
</body>

</html>